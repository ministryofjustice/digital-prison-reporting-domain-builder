#!/bin/bash

# Helper script that takes care of starting a local postgres DB using docker.
# Checks that the required commands are installed and will attempt to start the
# docker daemon if it's not running.
#
# Supports either Docker Destop (MAC) or colima, a cli only alterantive.
#
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$script_dir/../bin/lib/script-helpers"

database_name="domain_builder"

function check_docker_installed {
  if hash docker &> /dev/null
  then
    show_ok "Docker installed"
  else
    show_fail_and_exit "Docker not installed" "Please ensure docker is installed and available on your path."
  fi
}

function check_docker_compose_installed {
  if hash docker-compose &> /dev/null
  then
    show_ok "Docker compose installed"
  else
    show_fail_and_exit "Docker compose not installed" "Please ensure docker-compose is installed and available on your path."
  fi
}

function check_docker_daemon_available {
  if [ -e "/Applications/Docker.app" ]
  then
    show_ok "Docker desktop installed"
  else
    show_info "Docker desktop not installed"
    # Check for colima - a cli only docker desktop alternative
    if hash colima &> /dev/null
    then
      show_ok "Colima installed"
    else
      show_fail "Neither docker desktop nor colima are installed" "Please ensure that either Docker Desktop or colima is installed."
    fi
  fi
}

function check_docker_running {
  if docker ps &> /dev/null
  then
    show_ok "Docker running"
  else
    show_wait "Docker not running. Starting..."
    if [ -e "/Applications/Docker.app" ]
    then
      open -a Docker
      wait_for_docker_to_start
    elif hash colima &> /dev/null
    then
      colima start &> /dev/null
      wait_for_docker_to_start
    else
      show_fail "Unable to start docker daemon" "Please ensure that either Docker Desktop or colima is installed."
    fi
  fi
}

function start_postgres {
  show_wait "Running docker-compose..."
  docker_compose_file="$script_dir/postgres/docker-compose.yml"
  docker-compose -f "$script_dir/postgres/docker-compose.yml" up --detach --wait -t 60 &> /dev/null
}

function check_postgres_running {
  container_id=$(docker ps | grep -E "postgres.*Up.*5432" | cut -d ' ' -f1)

  if [ -n "$container_id" ]
  then
    show_ok "Postgres container $container_id running on local port 5432"
  else
    show_wait "Postgres container not running. Attempting to start..."
    container_id=$(docker ps -a | grep postgres | head -n1 | cut -d ' ' -f1)
    docker start $container_id &> /dev/null
    wait_for_postgres_to_start
  fi
}

function wait_for_docker_to_start {
  while ! docker ps &> /dev/null
  do
    sleep 1
  done
  show_ok "Docker daemon started"
}

function wait_for_postgres_to_start {
  while ! docker ps | grep -E "postgres.*Up.*5432" &> /dev/null
  do
    sleep 1
  done
  show_ok "Postgres container $container_id running on local port 5432"
}

function check_or_create_database {
  if docker exec -it -u postgres $container_id  psql -c "\l" | grep "$database_name" &> /dev/null
  then
    show_ok "Database '$database_name' exists"
  else
    show_info "Database '$database_name' does not exist. Creating..."
    docker exec -it -u postgres $container_id psql -c "create database $database_name;" &> /dev/null
    if docker exec -it -u postgres $container_id  psql -c "\l" | grep "$database_name" &> /dev/null
    then
      show_ok "Database '$database_name' created"
    else
      show_fail_and_exit "Failed to create database '$database_name'" "Try creating the database '$database_name' manually."
    fi
  fi
}

function apply_migrations {
  show_wait "Applying migrations to database..."
  if $script_dir/../bin/apply-migrations &> /dev/null
  then
    show_ok "Migrations applied successfully"
  else
    show_fail_and_exit "Migrations failed to apply" "Run ./bin/apply-migrations and review error output."
  fi
}

function run_sanity_checks {
  if docker exec -it -u postgres $container_id  psql  -d $database_name -c "select * from domain;" &> /dev/null
  then
    show_ok "Sanity checks passed"
  else
    show_fail_and_exit "Sanity checks failed" "Connect to the database and review the $database_name schemas."
  fi
}

echo
show_heading "Checking prerequisites"
echo
check_docker_installed
check_docker_compose_installed
check_docker_daemon_available
echo
show_heading "Starting postgres"
echo
check_docker_running
start_postgres
check_postgres_running
echo
show_heading "Configuring database"
echo
check_or_create_database
apply_migrations
run_sanity_checks
echo
